{"version":3,"sources":["App.js","reportWebVitals.js","index.js","App.module.css"],"names":["App","useState","inputAnswers","setInputAnswers","inpuQuestions","setInputQuestions","collectAnswers","setCollectAnswers","randomIndex","setRandomIndex","randomOption","setRandomOption","quizAnswer","setQuisAnswer","quizInit","setQuizinit","isTrue","setIsTrue","isHintVisible","setHintVisibility","isQuizStarted","setQuizStarted","changeAnswer","useCallback","e","target","value","changeQuestion","addAnswer","questionText","answerText","getQuizAnswer","answer","getRandomOption","randomSize","Math","floor","random","length","checkAnswer","window","alert","beginQuiz","handleRemove","id","filteredItems","filter","item","useEffect","className","css","wrapper","inputWrapper","placeholder","onChange","inputItem","onClick","map","bottomBlockWrapper","hintWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7a6edb16.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport css from \"./App.module.css\";\n\nexport const App = () => {\n  const [inputAnswers, setInputAnswers] = useState(\"\");\n  const [inpuQuestions, setInputQuestions] = useState(\"\");\n  const [collectAnswers, setCollectAnswers] = useState([]);\n  const [randomIndex, setRandomIndex] = useState(0);\n  const [randomOption, setRandomOption] = useState(\"\");\n  const [quizAnswer, setQuisAnswer] = useState(\"\");\n  const [quizInit, setQuizinit] = useState(true);\n  const [isTrue, setIsTrue] = useState(false);\n  const [isHintVisible, setHintVisibility] = useState(false);\n\n  const [isQuizStarted, setQuizStarted] = useState(false);\n\n  const changeAnswer = useCallback((e) => {\n    setInputAnswers(e.target.value);\n  }, []);\n  const changeQuestion = useCallback((e) => {\n    setInputQuestions(e.target.value);\n  }, []);\n\n  const addAnswer = useCallback(\n    (questionText, answerText) => {\n      setCollectAnswers([...collectAnswers, [questionText, answerText]]);\n      setInputAnswers(\"\");\n      setInputQuestions(\"\");\n    },\n    [collectAnswers]\n  );\n\n  const getQuizAnswer = useCallback((answer) => {\n    setQuisAnswer(answer.target.value);\n  }, []);\n\n  const getRandomOption = useCallback(() => {\n    const randomSize = Math.floor(Math.random() * collectAnswers.length);\n    setIsTrue(false);\n    setRandomIndex(randomSize);\n    setRandomOption(collectAnswers?.[randomSize]?.[0]);\n  }, [collectAnswers]);\n\n  const checkAnswer = useCallback(\n    (answer) => {\n      if (answer !== collectAnswers[randomIndex][1]) {\n        window.alert(\"неверно\");\n        setIsTrue(false);\n        return false;\n      }\n      setQuisAnswer(\"\");\n      getRandomOption();\n      setIsTrue(true);\n      return true;\n    },\n    [collectAnswers, randomIndex, getRandomOption]\n  );\n\n  const beginQuiz = useCallback(() => {\n    setQuizStarted(true);\n  }, []);\n\n  const handleRemove = useCallback(\n    (id) => {\n      const filteredItems = collectAnswers.filter((item) => item[0] !== id);\n\n      setCollectAnswers(filteredItems);\n    },\n    [collectAnswers]\n  );\n\n  useEffect(() => {\n    if (quizInit && isQuizStarted) {\n      getRandomOption();\n      setQuizinit(false);\n    }\n    if (isTrue) {\n      getRandomOption();\n      setIsTrue(false);\n      setHintVisibility(false);\n    }\n  }, [getRandomOption, quizInit, isQuizStarted, isTrue]);\n\n  return (\n    <div className={css.wrapper}>\n      <h1>Тестики</h1>\n      {!isQuizStarted && (\n        <>\n          <p>Введи варианты</p>\n          <div className={css.inputWrapper}>\n            <input\n              placeholder=\"по-русски\"\n              value={inpuQuestions}\n              onChange={changeQuestion}\n              className={css.inputItem}\n            />\n            <input\n              placeholder=\"по-немецки\"\n              value={inputAnswers}\n              onChange={changeAnswer}\n              className={css.inputItem}\n            />\n          </div>\n          <button onClick={() => addAnswer(inpuQuestions, inputAnswers)}>\n            Сохранить вариант{\" \"}\n          </button>\n          <ul>\n            {collectAnswers.map((item) => (\n              <li key={item[0]}>\n                <div>\n                  <p>По-русски: {item[0]}</p>\n                  <p>По-немецки: {item[1]}</p>\n                  <button onClick={() => handleRemove(item[0])}>\n                    Удалить вариант\n                  </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n          <button onClick={() => beginQuiz()}>Запустить тест </button>\n        </>\n      )}\n      {isQuizStarted && (\n        <div className={css.inputWrapper}>\n          <p>{randomOption}</p>\n          <input\n            value={quizAnswer}\n            onChange={getQuizAnswer}\n            placeholder=\"введи свой вариант\"\n            className={css.inputItem}\n          />\n          <div className={css.bottomBlockWrapper}>\n            <button onClick={() => checkAnswer(quizAnswer)}>\n              Проверить себя\n            </button>\n            <div className={css.hintWrapper}>\n              <button onClick={() => setHintVisibility(true)}>Подсказка</button>\n              {isHintVisible && <p>{collectAnswers[randomIndex][1]}</p>}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2Rh_f\",\"inputWrapper\":\"App_inputWrapper__3ht_9\",\"inputItem\":\"App_inputItem__1j6GM\",\"bottomBlockWrapper\":\"App_bottomBlockWrapper__2W-YQ\"};"],"sourceRoot":""}